
Test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098e  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000424  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	5c c0       	rjmp	.+184    	; 0x132 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b3 d0       	rcall	.+358    	; 0x210 <main>
  aa:	c0 c0       	rjmp	.+384    	; 0x22c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:

char command[3];
int count;

void USART_Init() {
	UBRR1H = (unsigned char) BAUD_RATE >> 8;	// - 전송 속도 설정
  ae:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char) BAUD_RATE;
  b2:	83 e3       	ldi	r24, 0x33	; 51
  b4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1B = (1<<RXCIE1) | (1<<TXEN1) | (1<<RXEN1);		// - 수신, 송신, 수신인터럽트 기능 설정
  b8:	88 e9       	ldi	r24, 0x98	; 152
  ba:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);					// - No Parity, 1 Stop Bit, 8 bit Data
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  c4:	08 95       	ret

000000c6 <USART_Transmitter>:
}


void USART_Transmitter(unsigned char txData) {
	while(!(UCSR1A & (1 << UDRE1)));	// - 송신 버퍼가 빌 때까지 대기
  c6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <USART_Transmitter>
	UDR1 = txData;						// - 버퍼에 데이터를 채우기
  ce:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  d2:	08 95       	ret

000000d4 <buzzCommand>:
}

void buzzCommand(char str[]) {
	if (str[1] - '0' == 1) {
  d4:	fc 01       	movw	r30, r24
  d6:	81 81       	ldd	r24, Z+1	; 0x01
  d8:	81 33       	cpi	r24, 0x31	; 49
  da:	11 f4       	brne	.+4      	; 0xe0 <buzzCommand+0xc>
		BUZZ_PORT = 0x00;
  dc:	12 ba       	out	0x12, r1	; 18
  de:	08 95       	ret
		} else if (str[1] - '0' == 0) {
  e0:	80 33       	cpi	r24, 0x30	; 48
  e2:	11 f4       	brne	.+4      	; 0xe8 <buzzCommand+0x14>
		BUZZ_PORT = 0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	08 95       	ret

000000ea <ledCommand>:
	}
}

void ledCommand(char str[]) {
	int one = str[1] - '0';
  ea:	fc 01       	movw	r30, r24
  ec:	21 81       	ldd	r18, Z+1	; 0x01
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 53       	subi	r18, 0x30	; 48
  f2:	31 09       	sbc	r19, r1
	int two = str[2] - '0';
  f4:	82 81       	ldd	r24, Z+2	; 0x02
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	c0 97       	sbiw	r24, 0x30	; 48
	if (two == 1) {
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 05       	cpc	r25, r1
  fe:	59 f4       	brne	.+22     	; 0x116 <ledCommand+0x2c>
		LED_PORT |= 1 << one;
 100:	33 b1       	in	r19, 0x03	; 3
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <ledCommand+0x22>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <ledCommand+0x1e>
 110:	83 2b       	or	r24, r19
 112:	83 b9       	out	0x03, r24	; 3
 114:	08 95       	ret
		} else if (two == 0) {
 116:	89 2b       	or	r24, r25
 118:	59 f4       	brne	.+22     	; 0x130 <ledCommand+0x46>
		LED_PORT &= ~(1<<one);
 11a:	33 b1       	in	r19, 0x03	; 3
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <ledCommand+0x3c>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <ledCommand+0x38>
 12a:	80 95       	com	r24
 12c:	83 23       	and	r24, r19
 12e:	83 b9       	out	0x03, r24	; 3
 130:	08 95       	ret

00000132 <__vector_30>:
	}
}


ISR(USART1_RX_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	0b b6       	in	r0, 0x3b	; 59
 13e:	0f 92       	push	r0
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	// - 수신 버퍼에서 읽어 온 데이터를 다시 송신
	if (UCSR1A & (1<<RXC1)) {
 158:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 15c:	88 23       	and	r24, r24
 15e:	0c f0       	brlt	.+2      	; 0x162 <__vector_30+0x30>
 160:	44 c0       	rjmp	.+136    	; 0x1ea <__vector_30+0xb8>
		rxData = UDR1;
 162:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		USART_Transmitter(rxData);
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	ab df       	rcall	.-170    	; 0xc6 <USART_Transmitter>
		if (rxData == '\n')
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	8a 30       	cpi	r24, 0x0A	; 10
 176:	c9 f1       	breq	.+114    	; 0x1ea <__vector_30+0xb8>
		{
			return;
		}
		
		command[count] = rxData;
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 180:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	fc 01       	movw	r30, r24
 186:	ef 5f       	subi	r30, 0xFF	; 255
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	20 83       	st	Z, r18

		
		if (count == 1 && command[0] == 'B') {
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	61 f4       	brne	.+24     	; 0x1aa <__vector_30+0x78>
 192:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <command>
 196:	22 34       	cpi	r18, 0x42	; 66
 198:	41 f4       	brne	.+16     	; 0x1aa <__vector_30+0x78>
			buzzCommand(command);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	9a df       	rcall	.-204    	; 0xd4 <buzzCommand>
			count = 0;
 1a0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 1a4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			return;
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <__vector_30+0xb8>
		}
		
		if (count == 2 && command[0] == 'L') {
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	91 05       	cpc	r25, r1
 1ae:	61 f4       	brne	.+24     	; 0x1c8 <__vector_30+0x96>
 1b0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <command>
 1b4:	2c 34       	cpi	r18, 0x4C	; 76
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <__vector_30+0x96>
			ledCommand(command);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	96 df       	rcall	.-212    	; 0xea <ledCommand>
			count = 0;
 1be:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 1c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			return;
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <__vector_30+0xb8>
		}
		
		if (count == 2 && command[0] != 'L') {
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	91 05       	cpc	r25, r1
 1cc:	49 f4       	brne	.+18     	; 0x1e0 <__vector_30+0xae>
 1ce:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <command>
 1d2:	2c 34       	cpi	r18, 0x4C	; 76
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <__vector_30+0xae>
			count = 0;
 1d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 1da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
			return;
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <__vector_30+0xb8>
		}
		count++;
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <count+0x1>
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
	}
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0b be       	out	0x3b, r0	; 59
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:

int main() {
	
	LED_DDR = 0xff;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	82 b9       	out	0x02, r24	; 2
	LED_PORT = 0x00;
 214:	13 b8       	out	0x03, r1	; 3
	
	BUZZ_DDR = 0xff;
 216:	81 bb       	out	0x11, r24	; 17
	BUZZ_PORT = 0xff;
 218:	82 bb       	out	0x12, r24	; 18
	
	USART_Init();
 21a:	49 df       	rcall	.-366    	; 0xae <USART_Init>
	sei();
 21c:	78 94       	sei
	USART_Transmitter('S');
 21e:	83 e5       	ldi	r24, 0x53	; 83
 220:	52 df       	rcall	.-348    	; 0xc6 <USART_Transmitter>
	
	count = 0;
 222:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 226:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0x1a>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
