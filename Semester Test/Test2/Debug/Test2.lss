
Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086c  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	16 d0       	rcall	.+44     	; 0xc6 <main>
  9a:	22 c0       	rjmp	.+68     	; 0xe0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Init_ADC>:
#define LED_PORT PORTE

void Init_ADC()
{
	//- ADC1 채널, AREF 기준 전압 => AVCC로 H/W 설정
	ADMUX  = (1<<REFS0) | (1<<MUX0);
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	87 b9       	out	0x07, r24	; 7
	
	//- 채널, 활성화, 프리스케일 설정
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	86 b9       	out	0x06, r24	; 6
  a6:	08 95       	ret

000000a8 <startADConverter>:

unsigned int startADConverter()
{
	unsigned int result;

	cli();									//- ADC 변환 중 인터럽트 금지
  a8:	f8 94       	cli

	ADCSRA |= (1<<ADSC);					//- ADC 변환 시작
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF))) ;			//- ADC 변환 완료 신호 대기
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <startADConverter+0x8>

	result = ADCL;		            	 	//- 변환 결과 저장
  b4:	24 b1       	in	r18, 0x04	; 4
	result |= ((ADCH & 0x03) << 8);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	83 70       	andi	r24, 0x03	; 3
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	98 2f       	mov	r25, r24
  be:	88 27       	eor	r24, r24
  c0:	82 2b       	or	r24, r18

	sei();									//- 인터럽트 허용
  c2:	78 94       	sei

	return result;
}
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	unsigned int AdcResult;
	Init_ADC();
  c6:	eb df       	rcall	.-42     	; 0x9e <Init_ADC>

	LED_DDR = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	82 b9       	out	0x02, r24	; 2
	LED_PORT = 0x00;
	
	while(1)
	{
		AdcResult = startADConverter();
  cc:	13 b8       	out	0x03, r1	; 3
  ce:	ec df       	rcall	.-40     	; 0xa8 <startADConverter>
		if (AdcResult <= 400) {
  d0:	81 39       	cpi	r24, 0x91	; 145
  d2:	91 40       	sbci	r25, 0x01	; 1
  d4:	10 f4       	brcc	.+4      	; 0xda <main+0x14>
			LED_PORT = 0x00;
  d6:	13 b8       	out	0x03, r1	; 3
  d8:	fa cf       	rjmp	.-12     	; 0xce <main+0x8>
		} else {
			LED_PORT = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	83 b9       	out	0x03, r24	; 3
  de:	f7 cf       	rjmp	.-18     	; 0xce <main+0x8>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
