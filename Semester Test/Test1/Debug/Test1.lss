
Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000832  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00001263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	67 c0       	rjmp	.+206    	; 0x184 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define FND_PORT PORTB

#define LED_DDR DDRE
#define LED_PORT PORTE

int main(void) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	int number[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  cc:	84 e1       	ldi	r24, 0x14	; 20
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1e>
	
	SW_DDR = 0x00;
  de:	14 ba       	out	0x14, r1	; 20
	FND_DDR = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23
	FND_PORT = 0x00;
  e4:	18 ba       	out	0x18, r1	; 24
	LED_DDR = 0xFF;
  e6:	82 b9       	out	0x02, r24	; 2
	LED_PORT = 0x00;
  e8:	13 b8       	out	0x03, r1	; 3
	
	while(1) {
		// 1번
		if ((SW_PIN^0xFF) >> 0 == 1)
  ea:	83 b3       	in	r24, 0x13	; 19
  ec:	8e 3f       	cpi	r24, 0xFE	; 254
  ee:	21 f4       	brne	.+8      	; 0xf8 <main+0x40>
		{
			FND_PORT = number[1];
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00000001;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	83 b9       	out	0x03, r24	; 3
		}
		
		// 2번
		if ((SW_PIN^0xFF) >> 1 == 1)
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	80 95       	com	r24
  fc:	86 95       	lsr	r24
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	21 f4       	brne	.+8      	; 0x10a <main+0x52>
		{
			FND_PORT = number[2];
 102:	8d 81       	ldd	r24, Y+5	; 0x05
 104:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00000011;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	83 b9       	out	0x03, r24	; 3
		}
		
		// 3번
		if ((SW_PIN^0xFF) >> 2 == 1)
 10a:	83 b3       	in	r24, 0x13	; 19
 10c:	80 95       	com	r24
 10e:	86 95       	lsr	r24
 110:	86 95       	lsr	r24
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	21 f4       	brne	.+8      	; 0x11e <main+0x66>
		{
			FND_PORT = number[3];
 116:	8f 81       	ldd	r24, Y+7	; 0x07
 118:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00000111;
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	83 b9       	out	0x03, r24	; 3
		}
		
		// 4번
		if ((SW_PIN^0xFF) >> 3 == 1)
 11e:	83 b3       	in	r24, 0x13	; 19
 120:	80 95       	com	r24
 122:	86 95       	lsr	r24
 124:	86 95       	lsr	r24
 126:	86 95       	lsr	r24
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	21 f4       	brne	.+8      	; 0x134 <main+0x7c>
		{
			FND_PORT = number[4];
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00001111;
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	83 b9       	out	0x03, r24	; 3
		}
		
		//54번
		if ((SW_PIN^0xFF) >> 4 == 1)
 134:	83 b3       	in	r24, 0x13	; 19
 136:	80 95       	com	r24
 138:	82 95       	swap	r24
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	21 f4       	brne	.+8      	; 0x148 <main+0x90>
		{
			FND_PORT = number[5];
 140:	8b 85       	ldd	r24, Y+11	; 0x0b
 142:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00011111;
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	83 b9       	out	0x03, r24	; 3
		}
		
		// 6번
		if ((SW_PIN^0xFF) >> 5 == 1)
 148:	83 b3       	in	r24, 0x13	; 19
 14a:	80 95       	com	r24
 14c:	82 95       	swap	r24
 14e:	86 95       	lsr	r24
 150:	87 70       	andi	r24, 0x07	; 7
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	21 f4       	brne	.+8      	; 0x15e <main+0xa6>
		{
			FND_PORT = number[6];
 156:	8d 85       	ldd	r24, Y+13	; 0x0d
 158:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b00111111;
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	83 b9       	out	0x03, r24	; 3
		}
		
		// 7번
		if ((SW_PIN^0xFF) >> 6 == 1)
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	80 95       	com	r24
 162:	82 95       	swap	r24
 164:	86 95       	lsr	r24
 166:	86 95       	lsr	r24
 168:	83 70       	andi	r24, 0x03	; 3
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	21 f4       	brne	.+8      	; 0x176 <main+0xbe>
		{
			FND_PORT = number[7];
 16e:	8f 85       	ldd	r24, Y+15	; 0x0f
 170:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b01111111;
 172:	8f e7       	ldi	r24, 0x7F	; 127
 174:	83 b9       	out	0x03, r24	; 3
		}
		
		// 8번
		if ((SW_PIN^0xFF) >> 7 == 1)
 176:	9f 99       	sbic	0x13, 7	; 19
 178:	b8 cf       	rjmp	.-144    	; 0xea <main+0x32>
		{
			FND_PORT = number[8];
 17a:	89 89       	ldd	r24, Y+17	; 0x11
 17c:	88 bb       	out	0x18, r24	; 24
			LED_PORT = 0b11111111;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	83 b9       	out	0x03, r24	; 3
 182:	b3 cf       	rjmp	.-154    	; 0xea <main+0x32>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
